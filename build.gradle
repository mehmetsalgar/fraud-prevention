buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/"}
		maven { url "https://oss.sonatype.org/content/repositories/snapshots"}
	}

	dependencies {
		classpath('com.google.cloud.tools:jib-native-image-extension-gradle:0.1.0')
		classpath "org.unbroken-dome.gradle-plugins.helm:helm-plugin:1.7.0"
	}
}

plugins {
	id 'java'
	id 'java-library'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.graalvm.buildtools.native' version '0.9.18'
	id 'com.google.cloud.tools.jib' version '3.3.1'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'com.google.cloud.tools.jib'
apply plugin: 'org.unbroken-dome.helm'

group = 'org.salgar.akka.fsm'
sourceCompatibility = '17'

ext {
	flag = true
}

if(ext.flag) {
	ext.props = [
			DOCKER_HUB_USER: property('DOCKER_HUB_USER'),
			DOCKER_HUB_PASSWORD: property('DOCKER_HUB_PASSWORD'),
			DOCKER_URL: property('DOCKER_URL'),
			DOCKER_UPLOAD_USER: property('DOCKER_UPLOAD_USER'),
			DOCKER_UPLOAD_PASSWORD: property('DOCKER_UPLOAD_PASSWORD'),
			HELM_URL: property('HELM_URL'),
			HELM_USER: property('HELM_USER'),
			HELM_PASSWORD: property('HELM_PASSWORD'),
			HELM_DOWNLOAD_CLIENT: property('HELM_DOWNLOAD_CLIENT')
	]
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

shadowJar {
}

jib {
	from {
		image = 'azul/zulu-openjdk:17.0.2-17.32.13'
		auth {
			username = "${props.DOCKER_HUB_USER}"
			password = "${props.DOCKER_HUB_PASSWORD}"
		}
	}
	to {
		image = "${props.DOCKER_URL}/${project.name}"
		tags = ["${project.version}"]
		auth {
			username = "${props.DOCKER_UPLOAD_USER}"
			password = "${props.DOCKER_UPLOAD_PASSWORD}"
		}
	}
	allowInsecureRegistries = true
}

helm {
	downloadClient {
		enabled = downloadHelmClient()
		version = '3.12.1'
	}
	charts {
		fp {
			chartName = 'fraud-prevention-application'
			chartVersion = "${project.version}"
			sourceDir = file('helm')
			filtering {
				values.put 'imageRepository', jib.to.image
				values.put 'imageTag', jib.to.tags.first()
				values.put 'appVersion', jib.to.tags.first()
			}
		}
	}
}

task printVersion {
	doLast {
		logger.lifecycle("Version:  ${project.version}")
	}
}

def helmProcess() {
	if("true" == property("HELM_PROCESS"))
		true
	else
		false
}

def downloadHelmClient() {
	if("true" == property("HELM_DOWNLOAD_CLIENT"))
		true
	else
		false
}

tasks.jib.dependsOn tasks.printVersion
tasks.build.dependsOn tasks.jib
